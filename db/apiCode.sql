/*
Navicat MySQL Data Transfer

Source Server         : aliyun
Source Server Version : 80021
Source Host           : 8.135.2.4:3306
Source Database       : apitest

Target Server Type    : MYSQL
Target Server Version : 80021
File Encoding         : 65001

Date: 2021-04-18 13:55:01
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for apiCode
-- ----------------------------
DROP TABLE IF EXISTS `apiCode`;
CREATE TABLE `apiCode` (
  `codeId` int NOT NULL,
  `context` text,
  `apiId` int DEFAULT NULL,
  `url` text CHARACTER SET utf8 COLLATE utf8_general_ci,
  PRIMARY KEY (`codeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of apiCode
-- ----------------------------
INSERT INTO `apiCode` VALUES ('0', 'private Content getTypeColumn(FieldDoc member) {\r\n    ......\r\n    StringTokenizer mods = new StringTokenizer(member.modifiers());\r\n    while(mods.hasMoreTokens()) {\r\n        Content modifier = new StringContent(mods.nextToken());\r\n        code.addContent(modifier);\r\n        code.addContent(getSpace());\r\n    }\r\n    ......\r\n    return tdType;\r\n}', '1', 'https://github.com/ceylon/ceylon-compiler/blob/master/langtools/src/share/classes/com/sun/tools/doclets/formats/html/ConstantsSummaryWriterImpl.java');
INSERT INTO `apiCode` VALUES ('1', 'private Content getTypeColumn(FieldDoc member) {\r\n    ......\r\n    StringTokenizer mods = new StringTokenizer(member.modifiers());\r\n    while(mods.hasMoreTokens()) {\r\n        Content modifier = new StringContent(mods.nextToken());\r\n        code.addContent(modifier);\r\n        code.addContent(getSpace());\r\n    }\r\n    ......\r\n    return tdType;\r\n}', '1', 'https://github.com/ceylon/ceylon-compiler/blob/master/langtools/src/share/classes/com/sun/tools/doclets/formats/html/ConstantsSummaryWriterImpl.java');
INSERT INTO `apiCode` VALUES ('2', 'private Content getTypeColumn(FieldDoc member) {\r\n    ......\r\n    StringTokenizer mods = new StringTokenizer(member.modifiers());\r\n    while(mods.hasMoreTokens()) {\r\n        Content modifier = new StringContent(mods.nextToken());\r\n        code.addContent(modifier);\r\n        code.addContent(getSpace());\r\n    }\r\n    ......\r\n    return tdType;\r\n}', '1', 'https://github.com/ceylon/ceylon-compiler/blob/master/langtools/src/share/classes/com/sun/tools/doclets/formats/html/ConstantsSummaryWriterImpl.java');
INSERT INTO `apiCode` VALUES ('3', 'private Content getTypeColumn(FieldDoc member) {\r\n    ......\r\n    StringTokenizer mods = new StringTokenizer(member.modifiers());\r\n    while(mods.hasMoreTokens()) {\r\n        Content modifier = new StringContent(mods.nextToken());\r\n        code.addContent(modifier);\r\n        code.addContent(getSpace());\r\n    }\r\n    ......\r\n    return tdType;\r\n}', '1', 'https://github.com/ceylon/ceylon-compiler/blob/master/langtools/src/share/classes/com/sun/tools/doclets/formats/html/ConstantsSummaryWriterImpl.java');
INSERT INTO `apiCode` VALUES ('4', 'private Content getTypeColumn(FieldDoc member) {\r\n    ......\r\n    StringTokenizer mods = new StringTokenizer(member.modifiers());\r\n    while(mods.hasMoreTokens()) {\r\n        Content modifier = new StringContent(mods.nextToken());\r\n        code.addContent(modifier);\r\n        code.addContent(getSpace());\r\n    }\r\n    ......\r\n    return tdType;\r\n}', '1', 'https://github.com/ceylon/ceylon-compiler/blob/master/langtools/src/share/classes/com/sun/tools/doclets/formats/html/ConstantsSummaryWriterImpl.java');
INSERT INTO `apiCode` VALUES ('5', 'public String toString() {\r\n        //......\r\n        ByteBuffer bb = content.duplicate();\r\n        bb.rewind();\r\n        byte[] b = new byte[bb.limit()];\r\n        bb.get(b);\r\n        //......\r\n        return \"UnknownEntry{\" +\"content=\" + Hex.encodeHex(b) +\'}\';\r\n    }', '0', 'https://github.com/AbinashBishoyi/FreeRapid-Plugins/blob/master/src/mp4parser/com/googlecode/mp4parser/boxes/mp4/samplegrouping/UnknownEntry.java');
INSERT INTO `apiCode` VALUES ('6', 'public String toString() {\r\n        //......\r\n        ByteBuffer bb = content.duplicate();\r\n        bb.rewind();\r\n        byte[] b = new byte[bb.limit()];\r\n        bb.get(b);\r\n        //......\r\n        return \"UnknownEntry{\" +\"content=\" + Hex.encodeHex(b) +\'}\';\r\n    }', '0', 'https://github.com/AbinashBishoyi/FreeRapid-Plugins/blob/master/src/mp4parser/com/googlecode/mp4parser/boxes/mp4/samplegrouping/UnknownEntry.java');
INSERT INTO `apiCode` VALUES ('7', 'public String toString() {\r\n        //......\r\n        ByteBuffer bb = content.duplicate();\r\n        bb.rewind();\r\n        byte[] b = new byte[bb.limit()];\r\n        bb.get(b);\r\n        //......\r\n        return \"UnknownEntry{\" +\"content=\" + Hex.encodeHex(b) +\'}\';\r\n    }', '0', 'https://github.com/AbinashBishoyi/FreeRapid-Plugins/blob/master/src/mp4parser/com/googlecode/mp4parser/boxes/mp4/samplegrouping/UnknownEntry.java');
INSERT INTO `apiCode` VALUES ('8', 'public String toString() {\r\n        //......\r\n        ByteBuffer bb = content.duplicate();\r\n        bb.rewind();\r\n        byte[] b = new byte[bb.limit()];\r\n        bb.get(b);\r\n        //......\r\n        return \"UnknownEntry{\" +\"content=\" + Hex.encodeHex(b) +\'}\';\r\n    }', '0', 'https://github.com/AbinashBishoyi/FreeRapid-Plugins/blob/master/src/mp4parser/com/googlecode/mp4parser/boxes/mp4/samplegrouping/UnknownEntry.java');
INSERT INTO `apiCode` VALUES ('9', 'public String toString() {\r\n        //......\r\n        ByteBuffer bb = content.duplicate();\r\n        bb.rewind();\r\n        byte[] b = new byte[bb.limit()];\r\n        bb.get(b);\r\n        //......\r\n        return \"UnknownEntry{\" +\"content=\" + Hex.encodeHex(b) +\'}\';\r\n    }', '0', 'https://github.com/AbinashBishoyi/FreeRapid-Plugins/blob/master/src/mp4parser/com/googlecode/mp4parser/boxes/mp4/samplegrouping/UnknownEntry.java');
INSERT INTO `apiCode` VALUES ('10', 'protected void doPost(HttpServletRequest req, HttpServletResponse resp)\r\n            throws ServletException, IOException {\r\n        //...\r\n        StringBuilder sb = new StringBuilder();\r\n        try (Scanner scanner = new Scanner(req.getInputStream(), \"UTF-8\")) {\r\n            while (scanner.hasNextLine()) {\r\n                sb.append(scanner.nextLine());\r\n            }\r\n        }\r\n        this.listener.processRequest(sb.toString(), req.getRequestURI(), req.getMethod(), null);\r\n        //...\r\n    }', '2', 'https://github.com/52North/OX-Framework/blob/develop/52n-oxf-adapters/oxf-ses-adapter/src/main/java/org/n52/oxf/ses/adapter/client/httplistener/SimpleConsumerServlet.java');
INSERT INTO `apiCode` VALUES ('11', 'protected void doPost(HttpServletRequest req, HttpServletResponse resp)\r\n            throws ServletException, IOException {\r\n        //...\r\n        StringBuilder sb = new StringBuilder();\r\n        try (Scanner scanner = new Scanner(req.getInputStream(), \"UTF-8\")) {\r\n            while (scanner.hasNextLine()) {\r\n                sb.append(scanner.nextLine());\r\n            }\r\n        }\r\n        this.listener.processRequest(sb.toString(), req.getRequestURI(), req.getMethod(), null);\r\n        //...\r\n    }', '2', 'https://github.com/52North/OX-Framework/blob/develop/52n-oxf-adapters/oxf-ses-adapter/src/main/java/org/n52/oxf/ses/adapter/client/httplistener/SimpleConsumerServlet.java');
INSERT INTO `apiCode` VALUES ('12', 'protected void doPost(HttpServletRequest req, HttpServletResponse resp)\r\n            throws ServletException, IOException {\r\n        //...\r\n        StringBuilder sb = new StringBuilder();\r\n        try (Scanner scanner = new Scanner(req.getInputStream(), \"UTF-8\")) {\r\n            while (scanner.hasNextLine()) {\r\n                sb.append(scanner.nextLine());\r\n            }\r\n        }\r\n        this.listener.processRequest(sb.toString(), req.getRequestURI(), req.getMethod(), null);\r\n        //...\r\n    }', '2', 'https://github.com/52North/OX-Framework/blob/develop/52n-oxf-adapters/oxf-ses-adapter/src/main/java/org/n52/oxf/ses/adapter/client/httplistener/SimpleConsumerServlet.java');
INSERT INTO `apiCode` VALUES ('13', 'protected void doPost(HttpServletRequest req, HttpServletResponse resp)\r\n            throws ServletException, IOException {\r\n        //...\r\n        StringBuilder sb = new StringBuilder();\r\n        try (Scanner scanner = new Scanner(req.getInputStream(), \"UTF-8\")) {\r\n            while (scanner.hasNextLine()) {\r\n                sb.append(scanner.nextLine());\r\n            }\r\n        }\r\n        this.listener.processRequest(sb.toString(), req.getRequestURI(), req.getMethod(), null);\r\n        //...\r\n    }', '2', 'https://github.com/52North/OX-Framework/blob/develop/52n-oxf-adapters/oxf-ses-adapter/src/main/java/org/n52/oxf/ses/adapter/client/httplistener/SimpleConsumerServlet.java');
INSERT INTO `apiCode` VALUES ('14', 'protected void doPost(HttpServletRequest req, HttpServletResponse resp)\r\n            throws ServletException, IOException {\r\n        //...\r\n        StringBuilder sb = new StringBuilder();\r\n        try (Scanner scanner = new Scanner(req.getInputStream(), \"UTF-8\")) {\r\n            while (scanner.hasNextLine()) {\r\n                sb.append(scanner.nextLine());\r\n            }\r\n        }\r\n        this.listener.processRequest(sb.toString(), req.getRequestURI(), req.getMethod(), null);\r\n        //...\r\n    }', '2', 'https://github.com/52North/OX-Framework/blob/develop/52n-oxf-adapters/oxf-ses-adapter/src/main/java/org/n52/oxf/ses/adapter/client/httplistener/SimpleConsumerServlet.java');
