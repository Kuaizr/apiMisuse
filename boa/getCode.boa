G: output collection[string][string][string] of string;

cur_class: string;
cur_method: string;

code := """public class C {
	void initInterfaceProperties(String temp,File dDir) throws IOException{
    if(!temp.equals("props.txt")){
		log.error("Wrong Template");
        return;
    }
    //load defalut properties
    //write to the property file
    String fPath = dDir.getAbosulatePath()+"/interface.prop";
    int n = 0;
    for(int i = 0;i < 10;i++){
        n++;
        n = n + 1;
        break;
        continue;
    }
    switch(n){
        case 0:
            break;
        case 1:
            System.out.print(n);
        case 2:
            System.out.print(2);
        defalut:break;
    }
    do{
        n = n - 1;
    }while(n == 0);
    try {
        File file = new File(fPath);
    }catch(Exception e){
        System.out.print(e);
        throw  ExceptionInstance;
    }
    if(!file.exists()){
        file.createNewFile();
    }
    FileOutputStream out = new FileOutputStream(file);
    prop.store(out,null);
    in.close();
    return null;
}
}""";

get_predicate := function(expr: Expression) : string {
    cond := "";

    visit(expr, visitor{
        before node: Expression -> {
            switch (node.kind) {
                case ExpressionKind.METHODCALL:
                    if(def(node.expressions) && len(node.expressions) == 1) {
                        # visit the receiver first
                        visit(node.expressions[0]);
                        cond = format("%s.", cond);
                    }
                    
                    cond = format("%s%s(", cond, node.method);
                    
                    if (def(node.method_args)) {
                        # visit argument
		                foreach (i: int; def(node.method_args[i])) {
		                    visit(node.method_args[i]);
		                    cond = format("%s,", cond);
		                }
		            }
		            cond = format("%s)", cond);
		            stop;
		        case ExpressionKind.NEW:
		            cond = format("%snew %s(", cond, node.new_type.name);
		            # visit arguments
		            if (def(node.expressions)) {
		                foreach(i: int; def(node.expressions[i])) {
		                    visit(node.expressions[i]);
		                    cond = format("%s,", cond);
		                }
		            }
		            cond = format("%s)", cond);
		            stop;
		        case ExpressionKind.LOGICAL_NOT:
		            cond = format("%s!", cond);
		            break;
		        case ExpressionKind.VARACCESS:
		            cond = format("%s%s", cond, node.variable);
		            break;
		        case ExpressionKind.LITERAL:
		            cond = format("%s%s", cond, node.literal);
		            break;
		        case ExpressionKind.LOGICAL_AND:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s && ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.LOGICAL_OR:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s || ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.EQ:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s == ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.LT:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s < ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.LTEQ:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s <= ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.NEQ:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s != ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.GT:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s > ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.GTEQ:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s >= ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.OP_ADD:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s + ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.OP_SUB:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s - ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.OP_DIV:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s / ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.OP_MULT:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s * ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.VARDECL:
		            delc := "";
		            for(k:=0;k<len(node.variable_decls);k++){
		                delc = format("%s %s %s",delc,node.variable_decls[k].variable_type.name,node.variable_decls[k].name);
		                if(def(node.variable_decls[k].initializer)){
		                    delc = format("%s = %s",delc,get_predicate(node.variable_decls[k].initializer));
		                }
		            }
		            cond = format("%s ",delc);
		            stop;
		        case ExpressionKind.ASSIGN:
		            delc := "";
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                delc = format("%s = %s",get_predicate(node.expressions[0]),get_predicate(node.expressions[1]));
		            }
		            cond = format("%s ",delc);
		            stop;
		        default: 
		            stop;
            }
        }
    });
    
    return cond;
};


my_method := function(n: Method) {
    methodName: string;
    methodReturn: string;
    methodArgs: string;
    methodExp: string;
    methodName = n.name;
    methodReturn = n.return_type.name;
    methodArgs = "";
    if (def(n.arguments)) {
        for (i := 0;i < len(n.arguments);i++) {
            if (i == len(n.arguments) - 1) {
                methodArgs = format("%s%s %s",methodArgs,n.arguments[i].variable_type.name,n.arguments[i].name);
            }else{
                methodArgs = format("%s%s %s,",methodArgs,n.arguments[i].variable_type.name,n.arguments[i].name);
            }
        }
    }
    methodExp = "";
    if(def(n.exception_types)){
        for(i := 0;i < len(n.exception_types);i++){
            if(i == len(n.exception_types) - 1){
                methodExp = format("%s%s",methodExp,n.exception_types[i].name);
            }else{
                methodExp = format("%s%s,",methodExp,n.exception_types[i].name);
            }
        }
    }
    stts: string = "";
    
    visit(n,visitor{
        before node: Statement -> {
            switch (node.kind) {
                case StatementKind.IF:
                    stts = format("%sif(%s){",stts,get_predicate(node.expression));
                    if(def(node.statements)){
                        for(k:=0;k<len(node.statements);k++){
                            visit(node.statements[k]);
                        }
                    }
                    stts = format("%s }",stts);
                    stop;
                case StatementKind.WHILE:
                    stts = format("%swhile(%s){",stts,get_predicate(node.expression));
                    if(def(node.statements)){
                        for(k:=0;k<len(node.statements);k++){
                            visit(node.statements[k]);
                        }
                    }
                    stts = format("%s }",stts);
                    stop;
                case StatementKind.FOR:
                    initializations := "";
                    updates := "";
                    if(def(node.initializations)){
                        for(l:=0;l<len(node.initializations);l++){
                            initializations = format("%s,%s",initializations,get_predicate(node.initializations[l]));
                        }
                    }
                    if(def(node.updates)){
                        for(l:=0;l<len(node.updates);l++){
                            updates = format("%s,%s",updates,get_predicate(node.updates[l]));
                        }
                    }
                    stts = format("%sfor(%s;%s;%s){",stts,initializations,get_predicate(node.expression),updates);
                    if(def(node.statements)){
                        for(k:=0;k<len(node.statements);k++){
                            visit(node.statements[k]);
                        }
                    }
                    stts = format("%s }",stts);
                    stop;
                case StatementKind.EXPRESSION:
                    stts = format("%s %s",stts,get_predicate(node.expression));
                    stop;
                case StatementKind.RETURN:
                    stts = format("%s return %s",stts,get_predicate(node.expression));
                    stop;
                case StatementKind.TRY:
                    stts = format("%s try {",stts);
                    if(def(node.statements)){
                        for(k:=0;k<len(node.statements);k++){
                            visit(node.statements[k]);
                        }
                    }
                    stop;
                case StatementKind.CATCH:
                    tempArgs := "";
                    tempArgs = format("%s %s",node.variable_declaration.variable_type.name,node.variable_declaration.name);
                    stts = format("%s } catch(%s){",stts,tempArgs);
                    if(def(node.statements)){
                        for(k:=0;k<len(node.statements);k++){
                            visit(node.statements[k]);
                        }
                    }
                    stts = format("%s }",stts);
                    stop;
                case StatementKind.BREAK:
		            stts = format("%s break;",stts);
		            stop;
		        case StatementKind.CONTINUE:
		            stts = format("%s continue;",stts);
		            stop;
		        case StatementKind.SWITCH:
		            stts = format("%s switch(%s){",stts,get_predicate(node.expression));
		            if(def(node.statements)){
                        for(k:=0;k<len(node.statements);k++){
                            visit(node.statements[k]);
                        }
                    }
		            stts = format("%s }",stts);
		            stop;
		        case StatementKind.CASE:
		            stts = format("%s case %s:",stts,get_predicate(node.expression));
		            stop;
		        case StatementKind.LABEL:
		            if(def(node.expression)){
		                stts = format("%s %s:",stts,get_predicate(node.expression));
		            }
		            if(def(node.statements)){
                        for(k:=0;k<len(node.statements);k++){
                            visit(node.statements[k]);
                        }
                    }
		            stop;
		        case StatementKind.DO:
		            stts = format("%s do{",stts);
		            if(def(node.statements)){
                        for(k:=0;k<len(node.statements);k++){
                            visit(node.statements[k]);
                        }
                    }
		            stts = format("%s }while(%s);",stts,get_predicate(node.expression));
		            stop;
                default: 
                    break;
                    
            }
        }
    });
    
    if(len(stts) > 0) {
            G[methodReturn][methodName][methodArgs] << stts;
    }
};

tree := parse(code);

visit(tree,visitor{
    before node: Declaration ->{
        cur_class = node.name;
        foreach(i: int; def(node.methods[i])){
            m := node.methods[i];
            my_method(m);
        }
    }
});