p:Project = input;
G: output collection[string][string][string] of string;
exce: output collection of string;

cur_file: string;
cur_class: string;
cur_method: string;

type EXPR = {cond:string,flag:bool};

# API query
api_query : array of string;
api_query = {"createNewFile"};

# type query
type_query : array of string;
type_query = {"File"};

require_args: set of string;

get_predicate := function(expr: Expression) : EXPR {
    tempCode: set of string;
    cond := "";
    methodCall := "";
    flag := false;

    visit(expr, visitor{
        before node: Expression -> {
            switch (node.kind) {
                case ExpressionKind.METHODCALL:
                    if(def(node.expressions) && len(node.expressions) == 1) {
                        # visit the receiver first
                        visit(node.expressions[0]);
                        cond = format("%s.", cond);
                        methodCall = format("%s.", methodCall);
                    }
                    
                    cond = format("%s%s(", cond, node.method);
                    methodCall = format("%s%s(", methodCall, node.method);
                    
                    if (def(node.method_args)) {
                        # visit argument
		                foreach (i: int; def(node.method_args[i])) {
		                    visit(node.method_args[i]);
		                    cond = format("%s,", cond);
		                    methodCall = format("%s,", methodCall);
		                }
		            }
		            cond = format("%s)", cond);
		            add(tempCode,methodCall);
		            stop;
		        case ExpressionKind.NEW:
		            cond = format("%snew %s(", cond, node.new_type.name);
		            # visit arguments
		            if (def(node.expressions)) {
		                foreach(i: int; def(node.expressions[i])) {
		                    visit(node.expressions[i]);
		                    cond = format("%s,", cond);
		                }
		            }
		            cond = format("%s)", cond);
		            stop;
		        case ExpressionKind.LOGICAL_NOT:
		            cond = format("%s!", cond);
		            break;
		        case ExpressionKind.VARACCESS:
		            add(tempCode,node.variable);
		            cond = format("%s%s", cond, node.variable);
		            break;
		        case ExpressionKind.LITERAL:
		            add(tempCode,node.literal);
		            cond = format("%s%s", cond, node.literal);
		            break;
		        case ExpressionKind.LOGICAL_AND:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s && ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.LOGICAL_OR:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s || ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.EQ:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s == ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.LT:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s < ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.LTEQ:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s <= ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.NEQ:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s != ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.GT:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s > ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.GTEQ:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s >= ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.OP_ADD:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s + ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.OP_SUB:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s - ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.OP_DIV:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s / ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.OP_MULT:
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                visit(node.expressions[0]);
		                cond = format("%s * ", cond);
		                visit(node.expressions[1]);
		                stop;
		            }
		            break;
		        case ExpressionKind.VARDECL:
		            delc := "";
		            for(k:=0;k<len(node.variable_decls);k++){
		                delc = format("%s %s %s",delc,node.variable_decls[k].variable_type.name,node.variable_decls[k].name);
		                if(def(node.variable_decls[k].initializer)){
		                    delc = format("%s = %s",delc,get_predicate(node.variable_decls[k].initializer).cond);
		                }
		            }
		            cond = format("%s ",delc);
		            stop;
		        case ExpressionKind.ASSIGN:
		            delc := "";
		            if (def(node.expressions) && len(node.expressions) == 2) {
		                delc = format("%s = %s",get_predicate(node.expressions[0]).cond,get_predicate(node.expressions[1]).cond);
		            }
		            cond = format("%s ",delc);
		            stop;
		        default: 
		            break;
            }
        }
    });

    check := intersect(tempCode,require_args);
    checkArray := values(check);
    if(len(checkArray) != 0){
        flag = true;
    }else{
        flag = false;
    }
    
    return {cond, flag};
};

# a coarse-grained query methodology based on a given set of types and apis
query := function(m: Method) : bool{
    clear(require_args);
    # referenced types in a method
    types: set of string;
    # referenced apis in a method
    apis: set of string;
    
    visit(m, visitor{
        before node: Variable -> add(types, node.variable_type.name);
        
        before node: Expression -> {
            if (node.kind == ExpressionKind.METHODCALL) {
                add(apis, node.method);
                if(node.method == api_query[0]){
                    caller := "";
                    if(def(node.expressions[0]) && def(node.expressions[0].variable)){
                        caller = node.expressions[0].variable;
                    }
                    add(require_args,caller);
                    if(def(current(Expression).method_args)){
                        methodArgs := current(Expression).method_args;
                        for(i:=0;i < len(methodArgs);i++){
                            add(require_args,get_predicate(methodArgs[i]).cond);
                        }
                    }
                }
            }
        }
    });
    
    # API query
    foreach(i : int; def(api_query[i])) {
        if (!contains(apis, api_query[i])) {
            return false;
        }
    }
    
    # type query
    foreach(i : int; def(type_query[i])) {
        if (!contains(types, type_query[i])) {
            return false;
        }
    }
    
    return true;
};

my_method := function(n: Method) {
    ExpressionArray: stack of string;
    clear(ExpressionArray);
    methodName: string;
    methodReturn: string;
    methodArgs: string;
    methodExp: string;
    methodName = n.name;
    methodReturn = n.return_type.name;
    methodArgs = "";
    if (def(n.arguments)) {
        for (i := 0;i < len(n.arguments);i++) {
            if (i == len(n.arguments) - 1) {
                methodArgs = format("%s%s %s",methodArgs,n.arguments[i].variable_type.name,n.arguments[i].name);
            }else{
                methodArgs = format("%s%s %s,",methodArgs,n.arguments[i].variable_type.name,n.arguments[i].name);
            }
        }
    }
    methodExp = "";
    if(def(n.exception_types)){
        for(i := 0;i < len(n.exception_types);i++){
            if(i == len(n.exception_types) - 1){
                methodExp = format("%s%s",methodExp,n.exception_types[i].name);
            }else{
                methodExp = format("%s%s,",methodExp,n.exception_types[i].name);
            }
        }
    }
    stts: string = "";
    
    visit(n,visitor{
        before node: Statement -> {
            switch (node.kind) {
                case StatementKind.IF: 
                    foreach (i: int; def(node.statements[i])) {
                        if (i == 0) {
                            # if branch
                            stts = format("%s if(%s){;",stts,get_predicate(node.expression).cond);
                            visit(node.statements[0]);
                        } else if (i == 1) {
                            # else branch, negate the if condition
                            stts = format("%s }else{;",stts);
                            visit(node.statements[1]);
                        } else {
                            # can this even happen? visit silently
                            visit(node.statements[i]);
                        }
                        stts = format("%s }",stts);
                    }
                    stop;
                case StatementKind.WHILE:
                    stts = format("%swhile(%s){",stts,get_predicate(node.expression).cond);
                    if(def(node.statements)){
                        for(k:=0;k<len(node.statements);k++){
                            visit(node.statements[k]);
                        }
                    }
                    stts = format("%s }",stts);
                    stop;
                case StatementKind.FOR:
                    initializations := "";
                    updates := "";
                    if(def(node.initializations)){
                        for(l:=0;l<len(node.initializations);l++){
                            initializations = format("%s,%s",initializations,get_predicate(node.initializations[l]).cond);
                        }
                    }
                    if(def(node.updates)){
                        for(l:=0;l<len(node.updates);l++){
                            updates = format("%s,%s",updates,get_predicate(node.updates[l]).cond);
                        }
                    }
                    stts = format("%sfor(%s;%s;%s){",stts,initializations,get_predicate(node.expression).cond,updates);
                    if(def(node.statements)){
                        for(k:=0;k<len(node.statements);k++){
                            visit(node.statements[k]);
                        }
                    }
                    stts = format("%s }",stts);
                    stop;
                case StatementKind.EXPRESSION:
                    exceps := get_predicate(node.expression);
                    if(exceps.flag){
#                        exce << exceps.cond;
                        push(ExpressionArray,exceps.cond);
                        stts = format("%s %s",stts,"---");
                    }
                    stop;
                case StatementKind.RETURN:
                    stts = format("%s return %s",stts,get_predicate(node.expression).cond);
                    stop;
                case StatementKind.TRY:
                    foreach (i: int; def(node.statements[i])) {
                        if (i == 0) {
                            # visit try block
                            stts = format("%s try {", stts);
                            visit(node.statements[0]);
                            stts = format("%s}", stts);
                        } else if (node.statements[i].kind == StatementKind.CATCH) {
                            # visit catch block, multiple catch? not sure.
                            tempArgs := "";
                            tempArgs = format("%s %s",node.variable_declaration.variable_type.name,node.variable_declaration.name);
                            stts = format("%s } catch(%s){",stts,tempArgs);
                            visit(node.statements[i]);
                            stts = format("%s}", stts);
                        } else if (node.statements[i].kind == StatementKind.BLOCK) {
                            stts = format("%s finally{", stts);
                            visit(node.statements[i]);
                            stts = format("%s}", stts);
                        }
                    }
                    stop;
                case StatementKind.BREAK:
		            stts = format("%s break;",stts);
		            stop;
		        case StatementKind.CONTINUE:
		            stts = format("%s continue;",stts);
		            stop;
		        case StatementKind.SWITCH:
		            stts = format("%s switch(%s){",stts,get_predicate(node.expression).cond);
		            if(def(node.statements)){
                        for(k:=0;k<len(node.statements);k++){
                            visit(node.statements[k]);
                        }
                    }
		            stts = format("%s }",stts);
		            stop;
		        case StatementKind.CASE:
		            stts = format("%s case %s:",stts,get_predicate(node.expression).cond);
		            stop;
		        case StatementKind.LABEL:
		            if(def(node.expression)){
		                stts = format("%s %s:",stts,get_predicate(node.expression).cond);
		            }
		            if(def(node.statements)){
                        for(k:=0;k<len(node.statements);k++){
                            visit(node.statements[k]);
                        }
                    }
		            stop;
		        case StatementKind.DO:
		            stts = format("%s do{",stts);
		            if(def(node.statements)){
                        for(k:=0;k<len(node.statements);k++){
                            visit(node.statements[k]);
                        }
                    }
		            stts = format("%s }while(%s);",stts,get_predicate(node.expression).cond);
		            stop;
                default: 
                    break;
                    
            }
        }
    });
    
    if(len(stts) > 0) {
#            G[methodReturn][methodName][string(require_args)] << stts;
        arr := values(ExpressionArray);
        for(i:=0;i<len(arr);i++){
            stts = strreplace(stts,"---",arr[i],false);
        }
        G[methodReturn][methodName][string(require_args)] << stts;
    }
};

visit(p, visitor {
    # only look at the latest snapshot
    before node: CodeRepository -> {
        # ignore projects with less than 100 revisions
        if (len(node.revisions) < 100) stop;
        
        snapshot := getsnapshot(node, "SOURCE_JAVA_JLS");
        foreach (i: int; def(snapshot[i]))
			visit(snapshot[i]);
		stop;
    }
    
    # record the current file
    before node: ChangedFile -> {
        cur_file = node.name;
        visit(node, visitor{
            
            # visit class declaration
            before node: Declaration -> {
                # record the class name
                cur_class = node.name;
                
                foreach(i: int; def(node.methods[i])){
                    m := node.methods[i];
                    cur_method = m.name;
                    
                    if (query(m)) {
                        my_method(m);
                    }
                }
            }
        });
    }
});